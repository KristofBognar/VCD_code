function [slope, y_int, R2, y_fit] = line_fit(x, y, sig_y)
%[slope, y_int, R2, y_fit] =line_fit(X,Y,YERR)
%  Create a linear least-squares fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : x
%      Y Output: y
%      Weights : yerr
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 03-Nov-2017 11:10:04


%% Fit data

% Set up fittype and options.
ft = fittype( 'poly1' );
opts = fitoptions( 'Method', 'LinearLeastSquares' );

% check if errors on y data are provided
if nargin==3
    % weights are 1/sigma^2 for matlab
    [xData, yData, weights] = prepareCurveData( x, y, 1./(sig_y.^2) );

    opts.Weights = weights;
else
    [xData, yData] = prepareCurveData( x, y );
end

% Fit model to data.
try 
    [fitresult, gof] = fit( xData, yData, ft, opts );
catch
    disp('Could not run regression')
    slope = [NaN NaN];
    y_int = [NaN NaN];
    R2 = NaN;
    y_fit = NaN;
    return
end
%% get fit results

coeffs=coeffvalues(fitresult);
try
    conf=confint(fitresult);

    slope_err=mean( abs(conf(:,1)-coeffs(1)) );
    yint_err=mean( abs(conf(:,2)-coeffs(2)) );

    slope=[coeffs(1),slope_err];
    y_int=[coeffs(2),yint_err];
    R2=gof.rsquare;
    y_fit=polyval(coeffs,x);
catch
    slope=[NaN,NaN];
    y_int=[NaN,NaN];
    R2=NaN;
    y_fit=NaN;
end


